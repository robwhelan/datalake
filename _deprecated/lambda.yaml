AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a lambda.
Parameters:
  pDeadLetterQueueArn:
    Type: String
  pDownstreamBucket:
    Type: String
    Description: name (not the ARN) of the downstream bucket.
  pLambdaSourceCodeBucket:
    Type: String
  pLambdaSourceCodeKey:
    Type: String
  pProjectName:
    Type: String
    Description: The lowercase, overall name of the project which will be used for naming and for tagging.
  pSourceQueueArn:
    Type: String
    Description: the sqs queue that will trigger this lambda
  pZone:
    Type: String
Resources:
  rLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref pLambdaSourceCodeBucket
        S3Key: !Ref pLambdaSourceCodeKey
      DeadLetterConfig:
        TargetArn: !Ref pDeadLetterQueueArn
      Description: Lambda stub to download a csv and move it into another downstream bucket.
      Environment:
        Variables:
          DOWNSTREAM_BUCKET: !Ref pDownstreamBucket #ensure the DOWNSTREAM_BUCKET exists.
      FunctionName: !Sub '${pProjectName}-lambda-${pZone}'
      Handler: function.lambda_handler
      Layers:
        - arn:aws:lambda:us-east-1:773548596459:layer:pandas-lambda:1
        - arn:aws:lambda:us-east-1:668099181075:layer:AWSLambda-Python36-SciPy1x:2
      MemorySize: 512
      ReservedConcurrentExecutions: 5
      Role: arn:aws:iam::773548596459:role/lambda_basic_execution #need to generalize this. Make this as part of the overall IAM policies and pass it to both the key policy and also to this lambda.
      Runtime: python3.6
      Timeout: 3
  rLambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn: rLambdaFunction
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !Ref pSourceQueueArn
      FunctionName: !GetAtt rLambdaFunction.Arn
